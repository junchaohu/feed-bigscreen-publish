{"version":3,"sources":["views/factory/GPUTable.js","views/factory/GPUChart.js","views/factory/Dashboard.js"],"names":["Td","this","props","idx","className","col","total","parseFloat","toFixed","Component","Tr","row","map","key","GPUTable","tableData","factory_report","totalData","total_report","data-sort","GPUChart","componentDidMount","chartObj","chart","current","showLoading","componentDidUpdate","prevProps","prevState","loading","hideLoading","React","createRef","highcharts","Highcharts","options","ref","boxHeight","genHeight","wh","window","innerHeight","Dashboard","setState","httpLoading","result","getFactoryTestData","setTimeout","state","factory_total","energyChart","getMultiBarConfig","cpuChart","genSeries","data","rp","tp","re","nameMap","value","te","v","fill","item","empty","newchart","Object","assign","multiBarConfig","height","series","xAxis","categories","ecc","emptyChartConfig","backgroundColor","energyTitle","cpuTitle","show","color"],"mappings":"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","file":"static/js/10.a89458d6.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Td extends Component {\n  render() {\n    if(this.props.idx === 0){\n        return <td className=\"text-center sm\"> {this.props.col} </td>\n    }else{\n      return this.props.total ? \n        this.props.idx === 6 ?\n        <td className=\"text-center sm\"> {(parseFloat(this.props.col)*100).toFixed(2) + '%'} </td> :\n        <td className=\"text-center sm\"> {this.props.col.toFixed(2)} </td> :\n       <td className=\"text-center sm\"> {this.props.col.toFixed(2)} </td>;\n        \n    }\n    \n  }\n  \n};\n\nexport class Tr extends Component {\n  render() {\n    return (\n        <tr>\n          { this.props.row.map((col, idx) => \n              <Td col={col} idx={idx} key={idx} total={this.props.total} />\n            )}\n        </tr>\n    )\n  }\n  \n};\n\n\nexport class GPUTable extends Component {\n  render() {\n    const tableData = this.props.factory_report;\n    const totalData = this.props.total_report;\n    return (\n        <table className=\"footable table table-bordered table-hover\" data-sort=\"false\"  >\n            <thead>\n                <tr >\n                    <th className=\"text-center\">用能单位</th>\n                    <th className=\"text-center\">实际能耗-KWh</th>\n                    <th className=\"text-center\">理论能耗-KWh</th>\n                    <th className=\"text-center\">产量</th>\n                    <th className=\"text-center\">实际单耗-KWh</th>\n                    <th className=\"text-center\">理论单耗-KWh</th>\n                    <th className=\"text-center\">实际单耗表现状态</th>\n                </tr>\n                \n            </thead>\n            <tbody>\n              { \n                tableData.map((row, idx) => \n                  <Tr row={ row } key={ idx } />\n                )\n              }\n            </tbody>\n            <tfoot className=\"hide-if-no-paging\">\n              { \n                totalData.map((row, idx) => \n                  <Tr row={ row } key={ idx } total={true} />\n                )\n              }\n            </tfoot>\n        </table>\n    )\n  }\n}\n\nexport default GPUTable\n","import React, { Component } from 'react'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\nexport class GPUChart extends Component {\n    constructor(props) {\n      super(props)\n      this.chart = React.createRef();\n    }\n\n    componentDidMount = () => {\n        this.chartObj = this.chart.current.chart;\n        this.chartObj.showLoading();\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n      if(this.props.loading){\n          this.chartObj.showLoading();\n      }else{\n          this.chartObj.hideLoading();\n      }\n    }\n    \n\n  render() {\n    return (\n      <div>\n        <HighchartsReact\n            highcharts={Highcharts}\n            options={this.props.options}\n            ref={this.chart}\n        />\n      </div>\n    )\n  }\n}\n\nexport default GPUChart\n","import React, { Component } from 'react';\nimport Loading from 'react-loading-bar';\nimport GPUTable from './GPUTable';\nimport GPUChart from './GPUChart';\nimport { emptyChartConfig, multiBarConfig } from '../../config/chartconfig';\nimport { getFactoryGPU, getFactoryTestData } from '../../services/Service';\n\nlet boxHeight = 400;\nconst genHeight = () => {\n  let wh = window.innerHeight;\n  if(wh >950){\n    boxHeight = 450;\n  }else if (wh >750) {\n    boxHeight = 400;\n  }else {\n    boxHeight = 350\n  }\n}\n\nclass Dashboard extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.nameMap = {\n      \"1\":\"实际能耗\",\n      \"2\":\"理论能耗\",\n      \"4\":\"实际单耗\",\n      \"5\":\"理论单耗\",\n      \"9\":\"实际产量\",\n      \"10\":\"理论产量\"\n    };\n\n    genHeight()\n\n    let ecc = Object.assign({}, emptyChartConfig, {chart:{height:boxHeight,backgroundColor:\"transparent\"}} )\n  \n    this.state = {\n       httpLoading: false,\n       energyTitle: \"实际能耗-理论能耗-对比图-kwh\",\n       cpuTitle: \"实际单耗-理论单耗-对比图-kwh\",\n       loading: true,\n       factory_report:[],\n       total_report:[],\n       energyChart: ecc,\n       cpuChart: ecc\n    }\n  }\n\n  componentDidMount = () => {\n    let query = {\n\t\t\tstart: '2018-11-15',\n\t\t\tend: '2018-11-16'\n    };\n    if(false){\n      this.setState({httpLoading:true});\n      getFactoryGPU(query).then(result => {\n        console.log( result)\n        this.setState((state, props) => {\n          return {\n            loading:false,\n            factory_report: result.factory_report,\n            total_report: result.factory_total,\n            energyChart: this.getMultiBarConfig(result[\"factory_report\"],\n              [1, 2],\n              result['real_product_count'],\n              result['theoretical_product_count']),\n            cpuChart: this.getMultiBarConfig(result['factory_report'],\n              [4, 5])\n          }\n        })\n        this.setState({httpLoading:false});\n      })\n      \n    }else{\n      this.setState({httpLoading:true});\n      let result = getFactoryTestData()\n      setTimeout(() => {\n        this.setState((state, props) => {\n          return {\n            loading:false,\n            factory_report: result.factory_report,\n            total_report: result.factory_total,\n            energyChart: this.getMultiBarConfig(result[\"factory_report\"],\n              [1, 2],\n              result['real_product_count'],\n              result['theoretical_product_count']),\n            cpuChart: this.getMultiBarConfig(result['factory_report'],\n              [4, 5])\n          }\n        })\n        this.setState({httpLoading:false});\n      }, 3000);\n    }\n  }\n  \n\n  genSeries = (data,key,rp,tp) => {\n    let rpd = {}, tpd = {};\n\t\tlet re = {\"name\":this.nameMap[key[0]], \n\t\t\t\t  \"data\":data.map( value => value[key[0]])};\n\t\tlet te = {\"name\":this.nameMap[key[1]], \n\t\t\t\t  \"data\":data.map(value => value[key[1]])};\n\t\tif(rp && tp){\n\t\t\trpd = {\n\t\t\t\t\"name\":this.nameMap[9],\n\t\t\t\t\"data\":data.map(v => v[0]).fill(rp),\n\t\t\t\t\"type\":\"line\",\n\t\t\t\t\"yAxis\":1\n\t\t\t};\n\t\t\ttpd = {\n\t\t\t\t\"name\":this.nameMap[10],\n\t\t\t\t\"data\":data.map(v => v[0]).fill(tp),\n\t\t\t\t\"type\":\"line\",\n\t\t\t\t\"yAxis\":1\n\t\t\t};\n\t\t\treturn [re,te,rpd, tpd];\n\t\t}else{\n\t\t\treturn [re,te];\n\t\t}\n  }\n\n  getMultiBarConfig = (item, key, rp, tp, empty) => {\n    let newchart = Object.assign({}, multiBarConfig);\n    newchart.chart.height = boxHeight;\n\t\tnewchart.series = this.genSeries(item,key, rp, tp);\n\t\tnewchart.xAxis.categories = item.map( v => v[0]);\n\t\treturn newchart;\n  }\n  \n  \n  render() {\n    return (\n      <div>\n        <Loading\n          show={ this.state.httpLoading }\n          color=\"#29d\"\n        />\n          <div className=\"row chart-box\">\n            <div className=\"col-lg-4 col-md-4 col-sm-12\">\n                <div className=\"panel panel-warning dashboard\">\n                    <div className=\"panel-heading dashboard\">\n                        { this.state.energyTitle }\n                    </div>\n                    <div className=\"panel-body\">\n                      <GPUChart \n                        options= { this.state.energyChart }\n                        loading={ this.state.loading } />\n                    </div>\n                </div>\n            </div>\n            \n            <div className=\"col-lg-offset-4 col-md-offset-4 col-lg-4 col-md-4 col-sm-12\">\n                <div className=\"panel panel-warning dashboard\">\n                    <div className=\"panel-heading dashboard\">\n                        { this.state.cpuTitle }\n                    </div>\n                    <div className=\"panel-body\">\n                      <GPUChart \n                        options={ this.state.cpuChart }\n                        loading={ this.state.loading } />\n                    </div>\n                </div>\n            </div>\n            \n\n          </div>\n          \n          <div className=\"row\">\n            <div className=\"panel panel-default\">\n                <div className=\"panel-body\">\n                  <GPUTable factory_report={ this.state.factory_report } total_report={ this.state.total_report } />\n                </div>\n            </div>\n          </div>\n          \n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n\n"],"sourceRoot":""}