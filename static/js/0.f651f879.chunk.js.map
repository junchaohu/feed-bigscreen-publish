{"version":3,"sources":["config/chartconfig.js","services/Service.js"],"names":["emptyChartConfig","chart","backgroundColor","events","load","loading","labelStyle","fontStyle","color","multiBarConfig","type","plotOptions","line","marker","enabled","symbol","radius","states","hover","legend","xAxis","labels","style","categories","crosshair","yAxis","min","allowDecimals","title","text","opposite","gridLineWidth","series","pieConfig","tooltip","headerFormat","pointFormat","pie","innerSize","cursor","dataLabels","padding","format","Highcharts","theme","contrastTextColor","name","colorByPoint","data","stackBarConfig","column","stacking","xDateFormat","startOnTick","rotation","formatter","dateFormat","this","value","heatMapConfig","plotBorderWidth","colorAxis","minColor","maxColor","getOptions","colors","align","layout","margin","verticalAlign","y","symbolHeight","point","x","borderWidth","opacity","columnRangeConfig","inverted","valueSuffix","columnrange","pyramidConfig","width","syncChartConfig","marginLeft","spacingTop","spacingBottom","positioner","chartWidth","label","shared","footerFormat","shadow","fontSize","valueDecimals","fillOpacity","api","window","getAPI","getFactoryTestData","console","log","factorydata"],"mappings":"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","file":"static/js/0.f651f879.chunk.js","sourcesContent":["import Highcharts from \"highcharts\";\n\nexport const emptyChartConfig = {\n  chart: {\n    backgroundColor: \"transparent\",\n    events: {\n      load() {\n        // this.showLoading();\n      }\n    }\n  },\n  loading: {\n    labelStyle: {\n      fontStyle: \"italic\",\n      color: \"blue\"\n    }\n  }\n};\n\nexport const multiBarConfig = {\n  chart: {\n    type: \"column\",\n    backgroundColor: \"transparent\",\n    events: {\n      load() {\n        // this.hideLoading.bind(this);\n      }\n    }\n  },\n  plotOptions: {\n    line: {\n      marker: {\n        enabled: false,\n        symbol: \"circle\",\n        radius: 2,\n        states: {\n          hover: {\n            enabled: true\n          }\n        }\n      }\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  xAxis: {\n    labels: {\n      style: {\n        color: \"white\"\n      }\n    },\n    categories: [],\n    crosshair: true\n  },\n  yAxis: [\n    {\n      labels: {\n        style: {\n          color: \"white\"\n        }\n      },\n      crosshair: true\n    },\n    {\n      min: 0,\n      allowDecimals: true,\n      title: {\n        text: null\n      },\n      labels: {\n        style: {\n          color: \"white\"\n        }\n      },\n      opposite: true,\n      // visible:false,\n      gridLineWidth: 0\n    }\n  ],\n\n  series: []\n};\n\nexport const pieConfig = {\n  chart: {\n    type: \"pie\"\n  },\n  events: {\n    load() {\n      // this.showLoading();\n    }\n  },\n  tooltip: {\n    headerFormat: \"<b>{point.key}</b>\",\n    pointFormat:\n      \"<br> <b>{point.y:.1f} / {point.total:.1f}</b> / <b> {point.percentage:.1f}% </b>\"\n  },\n  plotOptions: {\n    pie: {\n      innerSize: \"30%\",\n      cursor: \"pointer\",\n      dataLabels: {\n        padding: 2,\n        enabled: true,\n        format: \"<b>{point.name}</b>: {point.percentage:.1f} %\",\n        style: {\n          color:\n            (Highcharts.theme && Highcharts.theme.contrastTextColor) || \"white\"\n        }\n      }\n    }\n  },\n  series: [\n    {\n      name: \"Percentage\",\n      colorByPoint: true,\n      data: []\n    }\n  ]\n};\n\nexport const stackBarConfig = {\n  chart: {\n    type: \"column\"\n  },\n  plotOptions: {\n    column: {\n      stacking: \"normal\"\n    },\n    line: {\n      marker: {\n        enabled: false,\n        symbol: \"circle\",\n        radius: 2,\n        states: {\n          hover: {\n            enabled: true\n          }\n        }\n      }\n    }\n  },\n  tooltip: {\n    xDateFormat: \"%m-%d\",\n    headerFormat: \"<b>{point.key}</b><br>\",\n    pointFormat:\n      '<span style=\"color:{series.color}\">\\u25CF</span> {series.name}: {point.y:.3f} / {point.stackTotal:.2f} / {point.percentage:.0f}% </br>'\n  },\n\n  xAxis: {\n    startOnTick: false,\n    type: \"datetime\",\n    labels: {\n      rotation: -10,\n      formatter: function() {\n        var dateStr = Highcharts.dateFormat(\"%m-%d\", this.value);\n        return dateStr;\n      }\n    },\n    crosshair: null\n  },\n  yAxis: [\n    {\n      title: {\n        text: null\n      }\n    },\n    {\n      min: 0,\n      allowDecimals: true,\n      title: {\n        text: null\n      },\n      labels: {\n        style: {\n          color: \"purple\"\n        }\n      },\n      opposite: true,\n      gridLineWidth: 0\n    }\n  ],\n  series: []\n};\n\nexport const heatMapConfig = {\n  chart: {\n    type: \"heatmap\",\n    plotBorderWidth: 1\n  },\n  xAxis: {\n    categories: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\"\n    ]\n  },\n\n  yAxis: {\n    categories: [\"LGE\", \"GF6\", \"L850\", \"JQPT\", \"OTHER\"],\n    title: null\n  },\n\n  colorAxis: {\n    min: 0,\n    minColor: \"#FFFFFF\",\n    maxColor: Highcharts.getOptions().colors[0]\n  },\n\n  legend: {\n    align: \"right\",\n    layout: \"vertical\",\n    margin: 0,\n    verticalAlign: \"top\",\n    y: 20,\n    symbolHeight: 130\n  },\n\n  tooltip: {\n    formatter: function() {\n      return (\n        \"<b>\" +\n        this.series.xAxis.categories[this.point.x] +\n        \"</b> sold <br><b>\" +\n        this.point.value +\n        \"</b> items on <br><b>\" +\n        this.series.yAxis.categories[this.point.y] +\n        \"</b>\"\n      );\n    }\n  },\n\n  series: [\n    {\n      name: \"Sales per employee\",\n      borderWidth: 1,\n      opacity: 0.8,\n      data: [\n        [0, 0, 10],\n        [0, 1, 19],\n        [0, 2, 8],\n        [0, 3, 24],\n        [0, 4, 67],\n        [1, 0, 92],\n        [1, 1, 58],\n        [1, 2, 78],\n        [1, 3, 117],\n        [1, 4, 48],\n        [2, 0, 35],\n        [2, 1, 15],\n        [2, 2, 123],\n        [2, 3, 64],\n        [2, 4, 52],\n        [3, 0, 72],\n        [3, 1, 132],\n        [3, 2, 114],\n        [3, 3, 19],\n        [3, 4, 16],\n        [4, 0, 38],\n        [4, 1, 5],\n        [4, 2, 8],\n        [4, 3, 117],\n        [4, 4, 115],\n        [5, 0, 88],\n        [5, 1, 32],\n        [5, 2, 12],\n        [5, 3, 6],\n        [5, 4, 120],\n        [6, 0, 13],\n        [6, 1, 44],\n        [6, 2, 88],\n        [6, 3, 98],\n        [6, 4, 96],\n        [7, 0, 31],\n        [7, 1, 1],\n        [7, 2, 82],\n        [7, 3, 32],\n        [7, 4, 30],\n        [8, 0, 85],\n        [8, 1, 97],\n        [8, 2, 123],\n        [8, 3, 64],\n        [8, 4, 84],\n        [9, 0, 47],\n        [9, 1, 114],\n        [9, 2, 31],\n        [9, 3, 48],\n        [9, 4, 91]\n      ],\n      dataLabels: {\n        enabled: true,\n        color: \"#fff\"\n      }\n    }\n  ]\n};\n\nexport const columnRangeConfig = {\n  chart: {\n    type: \"columnrange\",\n    inverted: true\n  },\n\n  xAxis: {\n    categories: [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\"\n    ]\n  },\n\n  yAxis: {\n    title: {\n      text: \"Temperature ( °C )\"\n    }\n  },\n\n  tooltip: {\n    valueSuffix: \"°C\"\n  },\n\n  plotOptions: {\n    columnrange: {\n      dataLabels: {\n        enabled: true,\n        color: \"#fff\",\n        format: \"{y}°C\"\n      }\n    }\n  },\n\n  legend: {\n    enabled: false\n  },\n\n  series: [\n    {\n      name: \"Temperatures\",\n      data: [\n        [-9.9, 10.3],\n        [-8.6, 8.5],\n        [-10.2, 11.8],\n        [-1.7, 12.2],\n        [-0.6, 23.1],\n        [3.7, 25.4],\n        [6.0, 26.2],\n        [6.7, 21.4],\n        [3.5, 19.5],\n        [-1.3, 16.0],\n        [-8.7, 9.4],\n        [-9.0, 8.6]\n      ]\n    }\n  ]\n};\n\nexport const pyramidConfig = {\n  chart: {\n    type: \"pyramid\"\n  },\n\n  plotOptions: {\n    series: {\n      dataLabels: {\n        enabled: false,\n        format: \"<b>{point.name}</b> ({point.y:,.0f})\"\n      },\n      width: \"80%\"\n    }\n  },\n  legend: {\n    enabled: false\n  },\n  series: [\n    {\n      name: \"Unique users\",\n      data: [\n        [\"pumps\", 8654],\n        [\"boilers\", 4064],\n        [\"chillers\", 1987],\n        [\"phase1\", 976]\n      ]\n    }\n  ]\n};\n\nexport const syncChartConfig = {\n  chart: {\n    marginLeft: 40, // Keep all charts left aligned\n    spacingTop: 20,\n    spacingBottom: 20\n  },\n  title: {\n    text: \"\",\n    align: \"left\",\n    margin: 0,\n    x: 30\n  },\n  legend: {\n    enabled: false\n  },\n  xAxis: {\n    crosshair: true,\n    events: {\n      // setExtremes: function(e) {\n      //   Highcharts.syncExtremes(e);\n      // }\n    },\n    labels: {\n      // format: \"{value} km\"\n    }\n  },\n  yAxis: {\n    title: {\n      text: null\n    }\n  },\n  tooltip: {\n    positioner: function() {\n      return {\n        // right aligned\n        x: this.chart.chartWidth - this.label.width,\n        y: 10 // align to title\n      };\n    },\n    shared: true,\n    borderWidth: 0,\n    backgroundColor: \"none\",\n    headerFormat: \"\",\n    pointFormat: \"{point.y}\",\n    footerFormat: \"\",\n    shadow: false,\n    style: {\n      color: '#fff',\n      fontSize: \"18px\"\n    },\n    valueDecimals: 1\n  },\n  series: [\n    {\n      color: Highcharts.getOptions().colors[0],\n      fillOpacity: 0.3,\n      tooltip: { }\n    }\n  ]\n};\n","import factorydata from './factorydata.json';\nimport shopdata from './shopdata.json';\n\nexport const api = window.getAPI();\n\nexport const getFactoryGPU = async (query) => {\n  let base = \"factorygpu\";\n  let url = `${api}${base}/3/from/${query.start}/to/${query.end}`;\n  // url = 'https://jsonplaceholder.typicode.com/todos/101';\n  let res = await fetch(url);\n  if(res.ok && res.status === 200){\n    try{\n      return await res.json()\n    }\n    catch(e){\n      console.log(e)\n    }\n  }else{\n    console.log(res)\n  }\n\n  // fetch(url).then(\n  //   res => res.json(),\n  //   error  => console.log(error)\n  // ).then(\n  //   (result) => {\n  //     console.log(result)\n  //   },\n  //   (error) => {\n  //     console.log(error)\n  //   }\n  // )\n}\n\nexport const getShopGPU = async (query) => {\n  let base = \"shopgpu\";\n  let url = `${api}${base}/${query.id}/from/${query.start}/to/${query.end}`;\n  let res = await fetch(url);\n  if(res.ok && res.status === 200){\n    try{\n      return await res.json()\n    }\n    catch(e){\n      console.log(e)\n    }\n  }else{\n    console.log(res)\n  }\n}\n\nexport const getFactoryTestData = () => {\n  console.log(api);\n  return factorydata;\n}\n\nexport const getShopTestData = () => {\n  return shopdata;\n}\n\n\n"],"sourceRoot":""}