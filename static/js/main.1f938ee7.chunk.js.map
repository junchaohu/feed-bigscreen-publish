{"version":3,"sources":["redux/actions/actionTypes.js","redux/reducers/changePicker.js","redux/reducers/index.js","redux/store.js","config/highcharts.js","App.js","serviceWorker.js","index.js"],"names":["CHANGE_PICKER_SUCCESS","initialState","startDate","moment","subtract","endDate","hjc","state","action","type","Object","assign","picker","combineReducers","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","highchartsHeatMap","Highcharts","highchartsFunnel","highchartsMore","theme","colors","tooltip","headerFormat","pointFormat","footerFormat","shared","useHTML","chart","height","xAxis","labels","style","color","yAxis","gridLineDashStyle","gridLineColor","title","text","legend","enabled","itemStyle","itemHoverStyle","plotOptions","series","setOptions","global","useUTC","credits","DefaultLayout","Loadable","loader","loading","className","App","basename","path","name","component","Component","Boolean","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2HAAA,gCAAO,IAAMA,EAAwB,yB,4OCG/BC,EAAe,CACjBC,UAAUC,MAASC,SAAS,GAAI,QAChCC,QAASF,MAASC,SAAS,EAAG,SAcnBE,EAXH,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCAC5C,OAAQA,EAAOC,MACb,KAAKT,IACH,OAAOU,OAAOC,OAAO,GAAIJ,EAAOC,EAAOI,QAEzC,QACE,OAAOL,ICXEM,cAAgB,CAAEP,QCAlBQ,cAAYC,EAAYC,OAAOC,8BAAgCD,OAAOC,gC,mJCErFC,IAAkBC,KAClBC,IAAiBD,KACjBE,IAAeF,KAEfA,IAAWG,MAAQ,CAOlBC,OAAQ,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,WAE7GC,QAAU,CACTC,aAAc,yDACdC,YAAa,2HAEbC,aAAc,WACdC,QAAQ,EACRC,SAAS,GAkBVC,MAAM,CACLC,OAAO,KAERC,MAAO,CACNC,OAAQ,CACNC,MAAO,CACRC,MAAO,WAITC,MAAQ,CACPC,kBAAmB,UACnBC,cAAc,OACdL,OAAQ,CACPC,MAAO,CACLC,MAAO,UAKVI,MAAQ,CACPC,KAAO,KACPN,MAAO,CACNC,MAAO,UAKVI,MAAM,CACLC,KAAK,KACLN,MAAO,CACNC,MAAO,SAGTM,OAAO,CACNC,SAAQ,EACRC,UAAW,CACDR,MAAO,WAEXS,eAAe,CACXT,MAAO,YAKlBU,YAAY,GAGZC,OAAO,IAIR3B,IAAW4B,WAAW5B,IAAWG,OACjCH,IAAW4B,WAAW,CACrBC,OAAS,CACRC,QAAS,GAGVC,QAAU,CACTR,SAAU,KChGZ,IAGMS,EAAgBC,IAAS,CAC7BC,OAAQ,kBAAM,sDACdC,QALc,kBAAM,yBAAKC,UAAU,wBAAf,iBAwBPC,E,iLAXX,OACE,kBAAC,IAAD,CAAQC,SAAS,KACb,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,KAAK,OAAOC,UAAWT,U,GAPjCU,aCHEC,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2D,0CCFNC,IAASC,OACL,kBAAC,IAAD,CAAUC,MAAOA,GACb,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD6GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1f938ee7.chunk.js","sourcesContent":["export const CHANGE_PICKER_SUCCESS = \"CHANGE_PICKER_SUCCESS\";","import moment from 'moment'\nimport { CHANGE_PICKER_SUCCESS } from \"../actions/actionTypes\";\n\nconst initialState = {\n    startDate:moment().subtract(10, 'days'),\n    endDate: moment().subtract(1, 'days')\n};\n\nconst hjc = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_PICKER_SUCCESS: {\n      return Object.assign({}, state, action.picker);\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default hjc;","import { combineReducers } from \"redux\";\nimport hjc from \"./changePicker\";\n\nexport default combineReducers({ hjc });","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());","import Highcharts from 'highcharts';\nimport highchartsHeatMap from \"highcharts/modules/heatmap\";\nimport highchartsFunnel from \"highcharts/modules/funnel\";\nimport highchartsMore from 'highcharts/highcharts-more';\n// init the module\nhighchartsHeatMap(Highcharts);\nhighchartsFunnel(Highcharts);\nhighchartsMore(Highcharts);\n\nHighcharts.theme = {\n\t// colors:['#01A4CD','#25C43F','#E07326','#E0F300','#0CD7E8','#34EB7E','#FFAC62','#FFF570','#39FACA','#87E6FF'], //skin1-g\n\t// colors:['#049FDC','#43C166','#E96D46','#E9F200','#1DD4F0','#55EAA0','#FFA788','#FFF494','#5BFADB','#A5E4FF'], //skin2-g\n\t//colors:['#01A6D7','#29C659','#E1763B','#E1F300','#0ED8ED','#38EC94','#FFAE7B','#FFF588','#3EFBD5','#8BE6FF'], //skin3-g\n\t// colors: ['#4A95BF','#1abc9c', '#01A4CD', '#2ecc71', '#e67e22', '#3498db', '#e74c3c', '#9b59b6', '#95a5a6', '#34495e'], //flat colors\n\t// colors: ['#4572A7','#AA4643','#89A54E','#80699B','#3D96AE','#DB843D','#92A8CD','#A47D7C','#B5CA92'], //default\n\t// colors:['#50B432', '#ED561B', '#DDDF00', '#24CBE5', '#64E572', '#FF9655', '#FFF263','#6AF9C4'],\n\tcolors: ['#67b7dc','#6794dc','#6771dc','#8067dc','#a367dc','#c767dc','#dc67ce','#dc67ab','#dc6788','#dc6967','#dc8c67'],\n\t//colors: [\"#FF6600\", \"#FCD202\", \"#B0DE09\", \"#0D8ECF\", \"#2A0CD0\", \"#CD0D74\", \"#CC0000\", \"#00CC00\", \"#0000CC\", \"#DDDDDD\", \"#999999\", \"#333333\", \"#990000\"],\n\ttooltip : {\n\t\theaderFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n\t\tpointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n\t\t\t'<td style=\"padding:0\"><b>{point.y:.2f} </b></td></tr>',\n\t\tfooterFormat: '</table>',\n\t\tshared: true,\n\t\tuseHTML: true,\n\n\t\t// dateTimeLabelFormats:{\n\t\t//         minute:'%Y-%m-%d %H:%M',\n\t\t//         hour : '%Y-%m-%d %H:%M',\n\t\t//         day : '%Y-%m-%d',\n\t\t//         month : '%Y-%m',\n\t\t//         year : '%Y'\n\t\t//     },\n\t\t\n\t\t// formatter:function (){\n\t\t// \t\t\t\treturn '<b>'+Highcharts.dateFormat('%y-%m-%d %H:%M',new Date(this.x))\n\t\t// \t\t\t\t\t+ '~' + Highcharts.dateFormat('%H:%M',new Date(this.x+1000*60*30))\n\t\t// \t\t\t\t\t+ ':</b><br/><span style=\"color:'+this.series.color+';padding:0\"> '+ \n\t\t// \t\t\t\t\tthis.series.name + ':</span><b>'+\n\t\t// \t\t\t\t\tthis.y.toFixed(3) +'</b>';\n\t\t// \t\t\t},\n\t},\n\tchart:{\n\t\theight:400\n\t},\n\txAxis: {\n\t\tlabels: {\n\t\t  style: {\n\t\t\tcolor: \"white\"\n\t\t  }\n\t\t}\n\t  },\n\tyAxis : {\n\t\tgridLineDashStyle: 'DashDot',\n\t\tgridLineColor:'gray',\n\t\tlabels: {\n\t\t\tstyle: {\n\t\t\t  color: \"white\"\n\t\t\t}\n\t\t},\n\t\t//min : 0,\n\t\t//startOnTick : false,\n\t\ttitle : {\n\t\t\ttext : null,\n\t\t\tstyle: {\n\t\t\t\tcolor: '#fff'\n\t\t\t}\n\t\t},\n\t\t//showLastLabel:true,\n\t},\n\ttitle:{\n\t\ttext:null,\n\t\tstyle: {\n\t\t\tcolor: '#fff'\n\t\t}\n\t},\n\tlegend:{\n\t\tenabled:true,\n\t\titemStyle: {\n            color: '#F7FAFC'\n        },\n        itemHoverStyle:{\n            color: '#f37a1f'\n        }  \n\t\t//maxHeight:60,\n\t\t//labelFormatter:function(){return this.name.substring(0,50);}\n\t},\n\tplotOptions:{\n\t\t\n\t},\n\tseries:{\n\t\t\n\t}\n};\nHighcharts.setOptions(Highcharts.theme);\nHighcharts.setOptions({\n\tglobal : {\n\t\tuseUTC : false,\n\t\t//timezoneOffset: -480,\n\t},\n\tcredits : {\n\t\tenabled : false\n\t},\n\n}); ","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Loadable from 'react-loadable';\nimport './config/highcharts';\n\nconst loading = () => <div className=\"animated text-center\">Loading...</div>;\n\n// Containers\nconst DefaultLayout = Loadable({\n  loader: () => import('./components/layouts/DefaultLayout'),\n  loading\n});\n\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router basename=\"/\">\n          <Switch>\n            \n            <Route path=\"/\" name=\"Home\" component={DefaultLayout} />\n          </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport 'bootstrap-daterangepicker/daterangepicker.css';\nimport 'react-loading-bar/dist/index.css';\nimport './css/style.css';\n// import './css/feeddemo.css';\nimport './css/gpu.css';\nimport './css/panel.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}